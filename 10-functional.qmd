# Functional data {#sec-noneuclidean}

```{r}
#| include: false
#| cache: false
source("before-each-chapter.R")
```


Explain functional data

Examples: mortality rates, height/weight data for different ages.


Functional PCA

Apply KDE LOO on first few PCs





```{r}
#| echo: true
#| code-fold: false
#| message: false
# Wide version of log Mortality with ages on columns
frmort_wide <- fr_mortality |>
  filter(Sex == "Male") |>
  mutate(logmx = log(Mortality)) |>
  select(-Mortality, -Sex) |>
  tidyr::pivot_wider(names_from = Age, values_from = logmx, names_prefix = "Age")

# Compute first four principal components
pca <- frmort_wide |>
  select(-Year) |>
  prcomp(center = TRUE, scale = FALSE, rank = 4) |>
  broom::augment(frmort_wide[, "Year"]) |>
  select(-.rownames)

# Time series of first four PCs
pca |>
  tidyr::pivot_longer(starts_with(".fittedPC"),
    names_to = "PC", values_to = "value", names_prefix = ".fittedPC"
  ) |>
  ggplot(aes(x = Year, y = value)) +
  geom_line(aes(colour = PC))

# Scatterplot of first two PCs
pca |>
  ggplot(aes(x = .fittedPC1, y = .fittedPC2)) +
  geom_point()

# Find outliers in the PCs
pca_no_year <- pca |> select(-Year)
pca <- pca |>
  mutate(lookout = surprisals(pca_no_year))
outliers <- pca |> filter(lookout < 0.05)
pca |>
  ggplot(aes(x = .fittedPC1, y = .fittedPC2)) +
  geom_point() +
  geom_point(data = outliers, color = "red") +
  ggrepel::geom_label_repel(data = outliers, aes(label = Year), )
```
